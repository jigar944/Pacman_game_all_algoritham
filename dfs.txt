
def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first.

    Your search algorithm needs to return a list of actions that reaches the
    goal. Make sure to implement a graph search algorithm.

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print("Start:", problem.getStartState())
    print("Is the start a goal?", problem.isGoalState(problem.getStartState()))
    print("Start's successors:", problem.getSuccessors(problem.getStartState()))
    """
    "*** YOUR CODE HERE ***"
   
    openList = util.Stack();
    openList.push(problem.getStartState())
    closedList = util.Stack();
    listofMove = []
    visitedNodes = []
    pathNodes = []
    visited = {}
    parent_child = {}
    visited[problem.getStartState()] = "None"
    while not openList.isEmpty():
        x = openList.pop()
        if problem.isGoalState(x):
            visitedNodes.append(x)
            break
        else:
            visitedNodes.append(x)
            child = problem.getSuccessors(x)
            closedList.push(x)
            if len(child)!=0:
                ch =[]
                for c in child:
                    ch.append(c)
                    if c[0] not in visited.keys():
                        openList.push(c[0])
                        visited[c[0]] = c[1]
                    else:
                        value = visited[c[0]]
                        temp=[]
                        if value!="None":
                            if isinstance(value, list):
                                temp.extend(value)
                            else:
                                temp.append(value)
                            temp.append(c[1])
                            visited[c[0]] = temp
                parent_child[x] = ch
            else:
                parent_child[x] = []
                
    visit = visited.copy()
    l = []
    def ischild(x1,x2):
       if problem.isGoalState(x2):
           if x1 not in l:
               l.append(x1)
           l.append(x2)
           return
       
       child = parent_child[x1]
       temp=[]
       for x in child:
           temp.append(x[0])
       child = temp
       if x2 in child:
           if x1 not in l:
               l.append(x1)
           ischild(x2,visitedNodes[visitedNodes.index(x2)+1])
       else:
           if x1 in l:
               l.remove(x1)
           ischild(visitedNodes[visitedNodes.index(x1)-1],x2)
           
           
    ischild(visitedNodes[0],visitedNodes[1])
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    e = Directions.EAST
    n = Directions.NORTH
    for z in l:
        if(visited[z][0]=="South" or visited[z][0]=="North" or visited[z][0]=="East" or visited[z][0]=="West"): 
            previous = l[l.index(z)-1]
            for search in parent_child[z]:
                if search[0]==previous:
                    if search[1]=="South":
                        listofMove.append(n)
                    elif search[1]=="North":
                        listofMove.append(s)
                    elif search[1]=="East":
                        listofMove.append(w)
                    elif search[1]=="West":
                        listofMove.append(e) 
        else:
            if isinstance(visit[z], list):
                for i in visit[z]:
                    if l[l.index(z)-1] in i:
                        listofMove.append(i)
            elif visit[z]=="None":
                    continue
            else:       
                listofMove.append(visit[z])        
    return  listofMove     
             